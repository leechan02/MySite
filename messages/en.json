{
  "title": "Euiclee",
  "description": "Welcome to Euiclee's personal website!",
  "header": {
    "home": "Home",
    "projects": "Projects",
    "info": "Info"
  },
  "resume": {
    "resume": "/resume/Resume(en).pdf"
  },
  "work": {
    "mainTitle": "I enjoy creating something.",
    "subTitle": "Baeksu in Korea.",
    "bookmoeum": {
      "title": "Bookmoeum",
      "date": "Seoul Aug 2024",
      "description": "Book search web service."
    },
    "mysite": {
      "title": "MySite",
      "date": "Seoul Sep 2024",
      "description": "Portfolio website."
    },
    "webserv": {
      "title": "Webserv",
      "date": "42 Seoul Aug 2023 - Nov 2023",
      "description": "Build Web Server with C++98."
    },
    "transcendence": {
      "title": "Transcendence",
      "date": "42 Seoul Dec 2023 - Mar 2024",
      "description": "SPA ping pong game website."
    }
  },
  "info": {
    "mainTitle": "Hello I'm Euichan Lee",
    "subTitle": "I enjoy defining problems and finding solutions to make the world a bit more convenient.",
    "about": {
      "leftFirstTitle": "My background in Computer Science",
      "leftFirstContent": [
        "I wasn't initially interested in development. Just two years ago, I didn’t even know what coding was, but as I became more interested in the world, I realized how many inconveniences existed.",
        "Through this process, I realized the importance of problem-defining skills and became interested in the technologies that could solve these issues.",
        "s a result, I discovered 42 Seoul, a school that offered project-based active learning of fundamental computer science concepts such as operating systems, data structures, algorithms, and networks, rather than just lecture-based learning.",
        "After completing two years of study there, I'm now pursuing a career as a developer with a focus on front-end development."
      ],
      "leftSecondTitle": "Coding style",
      "leftSecondContent": [
        "I appreciate beauty. That's why when writing code, I consider whether someone seeing it for the first time can understand it, whether the structure isn't too complex, and I always think about code reusability for optimization.",
        "Because I believe that working together is better than working alone, I think communication skills are essential for developers. Having started from scratch, I enjoy and excel at explaining things in a way that anyone can understand easily.",
        "I save time by utilizing AI. I tend to use it to improve code quality or as an alternative to searching, and if something seems off, I refer to Google and official documentation to refine the code."
      ],
      "rightFirstTitle": "But I want more",
      "rightFirstContent": [
        "I'm curious about many things and have a lot I want to learn. As I go through life, I realize there's always more that I don't know than what I do know. But because of this, I always recognize that I could be wrong and constantly strive to grow.",
        "I believe that while things can be difficult, nothing is impossible. Having started in a completely new field two years ago, I had no choice but to work harder than others.",
        "I tackled each problem as it arose, and while building my foundational knowledge in computer science, I gained experience through over 300 code reviews and writing more than 10,000 lines of code for a single project.",
        "As a result, I've become fearless in acquiring new knowledge and skills and facing challenges. As a technical example, I have experience deploying a website built with Next.js, a completely new framework for me, in just three weeks."
      ],
      "rightSecondTitle": "In my spare time,",
      "rightSecondContent": [
        "I believe that knowledge broadens our perspective, and our perspective shapes our dreams. That's why I love learning, challenging myself, and documenting my experiences.",
        "I read books because I want to know and see more. I enjoy challenges, so I often just dive in and try things. Recently, I went on a trek in the Himalayas.",
        "I believe that what we learn becomes truly ours when we record and share it. That's why I run a small YouTube channel, like a growing diary where I jot down my thoughts and experiences."
      ]
    },
    "education": {
      "first": "42 Seoul",
      "firstLocation": "Seoul, Korea",
      "firstDate": "Jul 2022 - Jul 2024",
      "firstContent": "Experience in various toy projects",
      "second": "Korea National Open University",
      "secondLocation": "Seoul, Korea",
      "secondDate": "Sep 2023 - Present",
      "secondContent": "B.A. degree expected in Computer Science in 2028"
    },
    "etc": {
      "first": "OPIc AL",
      "second": "Craftsman Information Processing"
    },
    "skills": {
      "title": "SKILLS",
      "language": {
        "title": "Languages",
        "skills": "C/C++, JavaScript, TypeScript, HTML, CSS, English",
        "details": [
          {
            "skill": "C/C++ ⭐️⭐️",
            "description": "I have experience implementing various toy projects considering multi-process, multi-threading, object-oriented programming, and memory management."
          },
          {
            "skill": "JavaScript ️⭐⭐️️",
            "description": "I understand the difference between const, let, and var, and have experience creating SPA sites using component modularization with Vanilla JavaScript, similar to React."
          },
          {
            "skill": "TypeScript ⭐️",
            "description": "I can use TypeScript with React, setting up types using interfaces."
          },
          {
            "skill": "HTML ⭐⭐️️",
            "description": "I can create pages using HTML."
          },
          {
            "skill": "CSS ⭐⭐️️",
            "description": "I understand the concept of flex and can implement desired designs using CSS."
          },
          {
            "skill": "English ⭐️⭐️⭐️",
            "description": "OPIc AL, can communicate with native speakers without difficulty. I have no problem reading English technical documents when I have questions about technologies I'm using."
          }
        ]
      },
      "frontend": {
        "title": "Frontend",
        "skills": "React, Next.js, React Query, Redux, TailwindCSS, Framer Motion, i18n",
        "details": [
          {
            "skill": "React ⭐️⭐️",
            "description": "I understand React component structure from experience implementing component modularization with JavaScript alone, and can use React-dom for routing and components."
          },
          {
            "skill": "Next.js ⭐️⭐️",
            "description": "I know the difference between SSR and CSR, and have experience deploying services using dynamic routing and middleware-based routing."
          },
          {
            "skill": "React Query ⭐️",
            "description": "I have experience managing API caches and implementing infinite scrolling using queries."
          },
          {
            "skill": "Redux ⭐️",
            "description": "I understand the structure from implementing a pub/sub pattern similar to Redux in JavaScript, and can perform basic state management using Redux."
          },
          {
            "skill": "TailwindCSS ⭐️⭐️",
            "description": "I can implement most designs with TailwindCSS and customize development designs."
          },
          {
            "skill": "Framer Motion ⭐️",
            "description": "I can implement simple animation effects."
          },
          {
            "skill": "i18n ⭐️⭐️",
            "description": "I have experience implementing Korean-English switching functionality using the i18n library."
          }
        ]
      },
      "tools": {
        "title": "Others",
        "skills": "Git/GitHub, Figma, Slack, Notion, Visual Studio Code, Docker",
        "details": [
          {
            "skill": "Git/GitHub ⭐️⭐",
            "description": "I can manage Git Issues, apply branch strategies, and collaborate in teams."
          },
          {
            "skill": "Figma ⭐️⭐️⭐️",
            "description": "I can build design systems and create prototypes."
          },
          {
            "skill": "Slack ⭐️⭐️⭐️",
            "description": "Always available, can communicate smoothly with team members."
          },
          {
            "skill": "Notion ⭐️⭐️⭐️",
            "description": "I organize most information in Notion, and was always in charge of organizing the team space Notion during team projects."
          },
          {
            "skill": "Visual Studio Code ⭐️⭐️️",
            "description": "I'm a hybrid user using the vim plugin in Visual Studio."
          },
          {
            "skill": "Docker ⭐️",
            "description": "I understand the basic concepts of Docker and can build and set up Docker images."
          }
        ]
      }
    }
  },
  "webserv": {
    "content": {
      "title": "Webserv",
      "date": "42 Seoul August 2023"
    },
    "overview": {
      "myRoleTitle": "MyRole",
      "myRole": "Architecture Design, Config Parsing, HTTP Parsing, debugging log implementation, code refactoring, functional verification page development",
      "teamTitle": "Team",
      "team": ["Jinho Heo", "Hyeonjun An", "Yunseon Im"],
      "timelineTitle": "Timeline",
      "timeline": "4 Months, starts August 2023",
      "techTitle": "Tech Keywords",
      "techKeywords": "C++98, Makefile, HTML, CSS, Object Oriented Programming, Non-block I/O, I/O Multiplexing (kqueue), HTTP/1.1",
      "overviewTitle": "Overview",
      "overview": [
        "Webserv is an ambitious project undertaken as part of the School 42 curriculum, challenging students to develop a robust HTTP/1.1 compatible web server in C++ 98.",
        "This project pushes the boundaries of low-level network programming, requiring the implementation of non-blocking I/O operations and efficient request handling.",
        "Key features include the use of I/O multiplexing with `poll()` (or equivalent), ensuring the server never blocks or hangs indefinitely, and the ability to serve static websites while supporting multiple HTTP methods.",
        "By implementing these advanced concepts, Webserv not only serves as a practical learning tool for understanding web server architecture but also demonstrates the power and flexibility of C++ in creating high-performance network applications.",
        "The successful completion of this project showcases a deep understanding of network protocols, system-level programming, and efficient resource management in a challenging, real-world scenario."
      ]
    },
    "highlights": {
      "title": "HIGHLIGHTS",
      "highlights": "A HTTP/1.1 server implementation in C++98."
    },
    "problem": {
      "title": "THE PROBLEM",
      "subTitle": "Couldn't we just refer to Nginx to build it?",
      "first": "Nginx Structure",
      "firstContent": [
        "Initially, I wrote code thinking of a multi-process, multi-threaded structure referring to the Nginx structure, where a master process creates worker processes, and worker processes register signals and send responses according to each thread.",
        "However, when I had almost finished writing the structure, I discovered a user requirement that only one process should be used. Eventually, I had to be satisfied with only referring to Nginx for parsing the configuration file."
      ]
    },
    "architecture": {
      "title": "ARCHITECTURE",
      "subTitle": "How should the web server be structured?",
      "first": "Single Process",
      "firstContent": [
        "Events are managed and handled through kqueue in a single process.",
        "Based on the configuration file, ports are verified and connected. Events are managed by kqueue and processed separately as Read, Write, CGI, etc., according to inherited classes.",
        "When a response comes in, it is parsed according to the HTTP format, the corresponding request is processed, and a response is sent out."
      ]
    },
    "config": {
      "title": "CONFIG",
      "subTitle": "Nginx-like configuration file parsing structure.",
      "first": "Config Tree",
      "firstContent": [
        "The configuration file is in block format based on {}, ;, and if we consider the enclosing brackets as parents, the child elements reflect the settings of the parent elements.",
        "Therefore, if we construct a tree based on {} and ;, even if there are countless location blocks, we can reflect all the settings of the parent elements."
      ],
      "firstCodeEx": [
        "The tree and Map are globally managed in the Common class."
      ],
      "secondCodeEx": [
        "When WebServer is created, it simultaneously completes parsing by passing the config file in the constructor."
      ],
      "thirdCodeEx": [
        "The tree is managed by Nodes and is divided into http, server, and location block levels. Each node has tokens that should be held at each level, parent elements, and child nodes."
      ],
      "second": "Config Map",
      "secondContent": [
        "Once the tree is created based on tokens, we create a Map based on locations. This is because if we remember where the location is in the tree, we don't need to search the entire tree to find the incoming location. We can just check the settings by going up from the location position through the parent elements."
      ],
      "fourthCodeEx": [
        "We create a Map based on port, server_name, and location. By using MultiMap, we reduced the access time from O(N) to O(logN) because we don't need to traverse the entire tree to find location nodes.",
        "We could have further reduced it to O(1) by using std::unordered_map (hashmap), but this STL is not provided in C++98, so we couldn't use it."
      ],
      "fifthCodeEx": [
        "While Nginx supports the PCRE library for checking, this project is implemented to support only '~', '', and '$' syntax."
      ],
      "sixthCodeEx": [
        "When searching for location blocks in the Map, PCRE checking is partially supported ('~', '', '$')."
      ],
      "seventhCodeEx": [
        "If you know the port and host URI, you can retrieve the location node, and based on that node, you can get the configured settings through FindValue."
      ]
    },
    "http": {
      "title": "REQUEST&&RESPONSE",
      "subTitle": "The process of receiving requests and sending responses on the server.",
      "first": "Receiving Requests",
      "firstContent": [
        "The server receives data from clients through the recv() function and passes this data to the Http object owned by each Connection object to begin parsing the HTTP request."
      ],
      "second": "Response",
      "secondContent": [
        "If the parsed request is an HTTP request, the server calls the appropriate handler for the HTTP method (GET, POST, DELETE) through the Router.",
        "Each method processes the appropriate business logic according to the rules of the HTTP/1.1 protocol, then generates an appropriate Response message and responds to the client."
      ],
      "third": "Handling CGI Requests",
      "thirdContent": [
        "In the case of CGI requests, the server's main process creates a child process through the fork() system call, and the child process executes the CGI script through execve().",
        "This method is an asynchronous processing approach designed to prevent CGI requests from affecting the performance of the main process."
      ]
    },
    "parsing": {
      "title": "HTTP PARSER",
      "subTitle": "Method for parsing HTTP requests.",
      "first": "HTTP Request Processing",
      "firstContent": [
        "After validating the request during the parsing process, we only proceed to the next step if the request is valid. Requests are analyzed meticulously character by character and processed according to their state.",
        "The Response message is also generated in compliance with the HTTP/1.1 protocol, composing the message with content such as status codes, headers, and body."
      ],
      "firstCodeEx": [
        "Since requests don't come in all at once but can be split or overlapped, we parse the values in mBuffer while running a loop."
      ],
      "secondCodeEx": [
        "We check what value is currently being parsed through the state."
      ],
      "thirdCodeEx": [
        "We examine the incoming request syntax according to HTTP/1.1 specifications."
      ],
      "fourthCodeEx": [
        "We write the execution results according to the response specifications."
      ]
    },
    "test": {
      "title": "TEST",
      "subTitle": "Does the built web server function properly?",
      "first": "Testing Methods",
      "firstContent": [
        "We verify whether redirects to various locations work correctly, if the server continues to function well even after thousands of requests without shutting down, if it doesn't terminate when sent requests exceeding the maximum size, if sockets close properly when clients disconnect, and if it properly sends out errors when receiving invalid requests, among other things."
      ]
    }
  },
  "transcendence": {
    "content": {
      "title": "Transcendence",
      "date": "42 Seoul December 2023"
    },
    "overview": {
      "myRoleTitle": "MyRole",
      "myRole": "Design, Frontend, Project Lead",
      "teamTitle": "Team",
      "team": [
        "Taeyang Park Backend",
        "Hyeonjun An Backend",
        "Yunseon Im Game"
      ],
      "timelineTitle": "Timeline",
      "timeline": "4 Months, starts December 2023",
      "techTitle": "Tech Keywords",
      "techKeywords": "Vanilla JavaScript, Figma, HTML, CSS, Tailwindcss, Docker, Git/GitHub",
      "overviewTitle": "Overview",
      "overview": [
        "Transcendence is a Pong game website project. From the design stage, I planned a componentized structure using Figma and applied consistent styles using Tailwind CSS.",
        "The frontend was built using vanilla JavaScript. Modularized components were considered for code reusability, improving maintainability and scalability.",
        "A SPA architecture with a custom router was applied for a smooth user experience without page refreshes.",
        "A custom state management system was implemented using a Store pattern similar to Redux or Vuex."
      ]
    },
    "highlights": {
      "title": "HIGHLIGHTS",
      "highlights": "Transcendence is a website project reinterpreting the classic Pong game."
    },
    "design": {
      "title": "DESIGN",
      "subTitle": "How should we approach design?",
      "first": "Design Componentization",
      "firstContent": [
        "Initially, I started designing without considering components and development. However, I realized this might lead to difficulties during development. Thinking it would be better to reuse designs when possible, I began a redesign process over three days.",
        "I created components with reusability in mind and designed pages using these components. As a result, during development, I was able to reduce unnecessary time spent thinking about which components to create and where to place them when writing code."
      ]
    },
    "component": {
      "title": "COMPONENT",
      "subTitle": "What should we do to implement SPA?",
      "first": "Code Component Modularization",
      "firstContent": [
        "I referred to React components. To componentize, I created a component class, and all functional classes inherit from this component, rendering through the render() method."
      ],
      "firstCodeEx": ["The Component class has a render() method."],
      "secondCodeEx": [
        "All functional classes inherit from the Component class and render through the render() method."
      ],
      "thirdCodeEx": [
        "Components are created using the createComponent function."
      ],
      "fourthCodeEx": [
        "Through componentization, we can change only the component instead of reloading the entire page depending on the situation."
      ]
    },
    "route": {
      "title": "ROUTER",
      "subTitle": "How can we switch pages without refreshing?",
      "first": "Custom Router Implementation",
      "firstContent": [
        "The Router class returns the appropriate page based on the URL. Using JavaScript's History API-related functions, it detects URLs, manages history, finds the root id, and returns the page component."
      ],
      "firstCodeEx": [
        "The App class serves as the starting point of the application, creating a Router object that defines the rules for matching URLs with their corresponding pages."
      ],
      "secondCodeEx": [
        "When the Router class is created, an init function is called. It reads the current URL when first accessed and displays the appropriate page (by calling the routing function).",
        "It then handles the URL when the user navigates to different pages (e.g., when clicking different links)."
      ],
      "thirdCodeEx": [
        "When a user clicks a link within the page, it prevents the default link behavior (browser refreshing and loading the page) (e.preventDefault()), and a function called routePush is called.",
        "routePush changes the browser's URL (window.history.pushState), and because the URL has changed, it calls a function called routing to display the new page on the screen.",
        "The routing function finds the page component that matches the current URL (e.g., /home/, /profile/) and renders it on the screen."
      ],
      "fourthCodeEx": [
        "Once the routing function finds the page component, it renders that component on the screen through the render function.",
        "The render function finds a specific HTML element (in this case, rootElement) and inserts the newly created page into it."
      ]
    },
    "pubsub": {
      "title": "PUB/SUB",
      "subTitle": "How should we manage dark mode, profile status, and game mode states?",
      "first": "Pub/Sub Pattern",
      "firstContent": [
        "Referring to Redux's store, I used the Publisher/Subscriber pattern where changes in one place are detected and reacted to by other parts subscribing to those changes."
      ],
      "firstCodeEx": [
        "The PubSub class implements a mechanism for publishing and subscribing to events."
      ],
      "secondCodeEx": [
        "The Store class manages global state and triggers events when the state changes. The key here is wrapping the state in a Proxy, which automatically publishes events when the state changes."
      ],
      "thirdCodeEx": [
        "To change the state, actions and mutations are used. Instead of modifying the state directly, it's safely changed through mutations.",
        "For example, toggleDarkMode functions to turn the dark mode on and off. When the state changes, the Proxy detects the set operation and publishes a state change event."
      ],
      "fourthCodeEx": [
        "When the state changes, an event is automatically published, and components that have subscribed to that event detect the change and update the UI or perform other actions."
      ]
    },
    "collaboration": {
      "title": "COLLABORATION",
      "subTitle": "Efforts for collaboration",
      "first": "GitHub flow",
      "firstContent": [
        "I proposed systematic development and managed branches through a Git collaboration scenario based on the GitHub flow branch strategy.",
        "We collaborated using GitHub Issue labels, Issue Templates, PR Templates, and Git Commit Convention rules."
      ],
      "gitflow": [
        "Issue Create",
        "Branch Add",
        "Work",
        "PR Create",
        "Review",
        "Test",
        "Merge"
      ],
      "second": "Notion",
      "secondContent": [
        "I used Notion to bridge information gaps between team members."
      ]
    }
  },
  "mysite": {
    "content": {
      "title": "MyStie",
      "date": "September 2024"
    },
    "overview": {
      "myRoleTitle": "MyRole",
      "myRole": "I did everything.",
      "teamTitle": "Team",
      "team": ["Euichan Lee"],
      "timelineTitle": "Timeline",
      "timeline": "1 Week, starts September 2024",
      "techTitle": "Tech Keywords",
      "techKeywords": "Next.js, TypeScript, Figma, Tailwindcss, Redux, middleware, i18n, Framer",
      "overviewTitle": "Overview",
      "overview": [
        "My Site is a portfolio website. It was implemented using Next.js, with all designs implemented in Tailwindcss and designed with responsiveness in mind. Component movements were implemented using Framer Motion.",
        "Redux is used to globally manage the dark mode state. Korean-English switching functionality was implemented using the i18n library along with dynamic routing through middleware."
      ]
    },
    "highlights": {
      "title": "HIGHLIGHTS",
      "highlights": "A personal portfolio website providing project descriptions and a personal resume."
    }
  },
  "bookmoeum": {
    "content": {
      "title": "Bookmoeum",
      "date": "August 2024"
    },
    "overview": {
      "myRoleTitle": "MyRole",
      "myRole": "I did everything.",
      "teamTitle": "Team",
      "team": ["Euichan Lee"],
      "timelineTitle": "Timeline",
      "timeline": "3 Weeks, starts August 2024",
      "techTitle": "Tech Keywords",
      "techKeywords": "Next.js, TypeScript, Figma, Tailwindcss, Redux, React-query, OPEN APIs, Firebase, middleware, useInfinityScroll, Framer, Phase",
      "overviewTitle": "Overview",
      "overview": [
        "Book Collection is a book search service where users can find where to read books in one place, eliminating the need to search multiple sites.",
        "I implemented a design system including typography, colors, spacing, and UI components using Figma before proceeding with the design work. The design was created with responsiveness in mind.",
        "It's a web page based on Next.js, with TypeScript used for type specifications. For book information, I used the Naver API for searches to provide as much book information as possible, and the Aladin API for more detailed information on the book detail page.",
        "Login ans DB was implemented using Firebase, and book information checks and displays book availability from Kyobo Book Centre, Yes24, Aladin, Ridibooks, and the user's selected library. I used APIs for Aladin and libraries, and web crawling for the other bookstores."
      ]
    },
    "highlights": {
      "title": "HIGHLIGHTS",
      "highlights": "Provides information on where to read books in one place using OPEN APIs from bookstores and libraries, as well as web crawling."
    },
    "design": {
      "title": "DESIGN SYSTEM",
      "subTitle": "How should we create the design?",
      "first": "Building a Design System",
      "firstContent": [
        "We introduced a design system to ensure consistent design application and to prevent confusion or mismatched specifications during development.",
        "In the Foundation, we set and stored colors, typography, and specifications, which were then used in UI components.",
        "From the design stage, we considered componentization, designed components divided by UI, and then used them in the final design."
      ]
    },
    "api": {
      "title": "OPEN API",
      "subTitle": "Which APIs should we use and how?",
      "first": "Bookstore API",
      "firstContent": [
        "For domestic book information, there are bookstore APIs from Naver and Aladin, each with its own characteristics.",
        "Therefore, we used Naver for searches as it provides more book information, and Aladin API for the book detail pages as it offers more detailed information for each book."
      ],
      "second": "Library API",
      "secondContent": [
        "For libraries, we used public APIs and stored a list of libraries separately. When a desired library is selected, we check the availability of books using each library's ID."
      ],
      "third": "React-query and API folder",
      "thirdContent": [
        "Values fetched from APIs are cached using staletime to avoid unnecessary repeated API calls.",
        "Instead of fetching APIs directly on the client-side, we divided each API into folders and set up a uniform format for calling APIs in server components."
      ],
      "firstCodeEx": ["Search results use the Naver API."],
      "secondCodeEx": [
        "The result list is implemented using useInfiniteQuery to automatically load the next page when scrolling down."
      ],
      "thirdCodeEx": [
        "Book information is retrieved through crawling and APIs specific to each bookstore."
      ]
    },
    "state": {
      "title": "STATE",
      "subTitle": "How can we pass information when navigating between pages?",
      "first": "API Recall Problem",
      "firstContent": [
        "The book search page and book detail page have different routes, requiring the page to be reloaded. However, this causes a delay problem as the API needs to be called again each time.",
        "To solve this, we thought of passing the already fetched search results to the book detail page, allowing values to be displayed immediately."
      ],
      "second": "Using Redux",
      "secondContent": [
        "While it was possible to pass values from the search page to the detail page using query parameters, this would make the URL messy. Instead, we chose to store the values in Redux and retrieve them from there."
      ],
      "firstCodeEx": [
        "When listing book information, clicking on each book manages the values through Redux."
      ],
      "secondCodeEx": [
        "The BookDetail page doesn't fetch the book information again via API, but instead composes the page using the information managed in Redux."
      ]
    },
    "login": {
      "title": "LOGIN",
      "subTitle": "Methods to check logged-in users based on user type",
      "first": "Firebase",
      "firstContent": [
        "For login, we implemented methods using Firebase, including email and password login, and Google login."
      ],
      "second": "Middleware",
      "secondContent": [
        "Since users have their own database and need to check their library, we need to verify whether they are logged in or not.",
        "This verification is done through middleware, which intercepts the signal, checks if it's a designated link, and shows the appropriate page accordingly."
      ],
      "firstCodeEx": [
        "The middleware is located at the page root and intercepts requests to check specified paths.",
        "If it determines that login is required for a path, it redirects to the login page."
      ]
    },
    "data": {
      "title": "DB",
      "subTitle": "How to manage information that needs to be stored?",
      "first": "Firestore",
      "firstContent": [
        "Initially, we only stored the ISBN of books saved by each user in the user data. However, this required API calls even for the book list, so we decided to include the already fetched API data when saving on the page."
      ],
      "firstCodeEx": [
        "Since books selected by users need to be managed in order, we also included the time of saving."
      ]
    },
    "animation": {
      "title": "ANIMATION",
      "subTitle": "Considering more user-friendly UI/UX.",
      "first": "Phase",
      "firstContent": [
        "To make it more interesting when fetching values from the API, instead of just showing 'Loading', we created characters in Figma, then used an animation tool called Phase to create an mp4, which is displayed during loading."
      ],
      "second": "CSS && Framer",
      "secondContent": [
        "The book list display on the homepage and the bookstore list display were implemented using CSS and Framer respectively."
      ]
    }
  }
}
